# Default values for pihole-exporter.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: ekofr/pihole-exporter
  tag: latest
  pullPolicy: IfNotPresent

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

service:
  type: ClusterIP
  # The piHole Exporter port.
  # Changing the value here will also set the 'PORT' environmental variable for the container
  port: 9617
  portName: exporter-port

ingress:
  enabled: false
  annotations: {}
    # kubernetes.io/ingress.class: nginx
  # kubernetes.io/tls-acme: "true"
  hosts:
  #    - host: pihole-host.local
  #      paths: {}

  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

# Endpoint configuration for your piHole instance
piHole:
  hostname: service-name.namespace.svc.cluster.local #InsertYourValueHere
  port: 80 #Change the port the exporter tries to access your Pihole Service on

extraEnvVars:
  INTERVAL: 10s,

secret:
  # false - generate a new secret using the value(s) from 'secretEnvVars'
  # true - use an existing secret within the same namespace, see 'existing' below.
  generate: true
  # Used when generating a new secret from either the given pi-hole API token OR password
  secretEnvVars:
  #   PIHOLE_API_TOKEN: <YOUR_PI_HOLE_API_TOKEN>
  #   PIHOLE_PASSWORD: <YOUR_PI_HOLE_PASSWORD>

  # Details of an existing secret within the same namespace containing the pi-hole API token OR password
  existing:
    # The name of the existing secret
    secretName: my-pi-hole-secret
    # The type of piHole credential in the secret; use 'PIHOLE_API_TOKEN' or 'PIHOLE_PASSWORD'
    piHoleCredentialType: PIHOLE_API_TOKEN
    # The key within the secret containing the piHole api token or password
    secretKey: PIHOLE_API_TOKEN

# Configuration for the deployment of a 'ServiceMonitor' resource for autoconfiguration
serviceMonitor:
  # true - deploy a 'ServiceMonitor' resource, requires the kube-prometheus CRDs to be deployed beforehand
  enabled: false
  # Use to override the namespace for the ServiceMonitor, default to the release namespace
  namespace: ""
  interval: "60s"
  scrapeTimeout: "30s"
  relabelings: ""
  metricRelabelings: ""

networkPolicies:
  # true - deploy network polies
  enabled: false
  piHolePolicy:
    # The namespace of your pihole instance if running in a different namespace to the pi-hole-exporter
    namespace: ""
    # The labels used to target your piHole instance
    matchLabels: {
      # For example: this label is applied to the pihole pod when using the 'mojo2600/pihole' helm chart
      app: pihole
    }

  piHoleExporterPolicy:
    # The labels used to allow access by your Prometheus instance
    matchLabels: {
      # For example: this label is applied to the prometheus pod when deployed using the 'kube-prometheus-stack' helm chart
      app.kubernetes.io/name: prometheus
    }

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
#   memory: 128Mi

nodeSelector: {}

tolerations: []

affinity: {}

securityContext: {}

annotations: {}
